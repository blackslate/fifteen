@counter-style yours {
  system: cyclic;
  symbols: "А" "л" "е" "к" "с" "а" "н" "д" "р" "а" "о" "я" "т" "в" "о" "й";
  suffix: ""
}

@counter-style today {
  system: cyclic;
  symbols:
    "в" "о" "н" "й"
    "Т" "д" "ь" "г"
    "о" "е" "е" "я"
    "д" "с" "е" "н";
  suffix: ""
}

:root {
  font-family: Avenir, Helvetica, Arial, sans-serif;

  --count: today;

  --white: #fff;
  --light: #ddd;
  --mid: #888;
  --hole: #000;
  --dark: #222;
  --can:  #040;
  --dont: #333;
  --next: #020;

  --round: 8px;
  --main: 298px;
  --size: 52px;
  --edge:  5px;
  --tile: 64px; /* + 2 * var(-edge) = 73 */
  --gap:   1px;
  --tiny: 32px;

  color: var(--light);
  background-color: var(--dark);

  --seed1:
    1 * 4096
  + 2 * 256
  + 3 * 16
  + 4;
  --seed2:
    5 * 4096
  + 6 * 256
  + 7 * 16
  + 8;
  --seed3:
    9 * 4096
  + 10 * 256
  + 11 * 16
  + 12;
  --seed4:
    13 * 4096
  + 14 * 256
  + 15 * 16
  + 0;
}

body {
  margin: 0;
  padding: 0;
  min-height: 100vh;
  display: flex;
  justify-content: center;
  align-items: center;
}

main {
  position: relative;
  width: var(--main);
  height: var(--main);
  border: 1px solid var(--white);
  border-radius: var(--round);
  overflow: hidden;
}

div.tiles {
  position: absolute;
  top: 0;
  left: 0;
  width: var(--main);
  height: var(--main);

  display: grid;
  grid-template-columns: repeat(4, 1fr);
  grid-template-rows: repeat(4, 1fr);

  font-size: var(--size);
  line-height: var(--size);
  text-align: center;
}

label:not([for]) {
  display: inline-block;
  position: relative;
  width: var(--tile);
  height: var(--tile);
  border: var(--edge) outset var(--mid);
  pointer-events: none;
}
label:has(:checked) {
  border-color: transparent;
  background-color: var(--hole);
}
label span::after {
  position: relative;
  top: var(--round);
  /* background-color: #f009; */
}
label:has(:checked) span::after {
  display: none;
}

input {
  position: absolute;
  left: -999vw;
}

.tiles.label {
  &:nth-child(4n + 1) {
    grid-column: 1;
  }

  &:nth-child(4n + 2) {
    grid-column: 2;
  }

  &:nth-child(4n + 3) {
    grid-column: 3;
  }

  &:nth-child(4n + 4) {
    grid-column: 4;
  }
}

label:has(+ label + label + label + label :checked),
label:has(+ label:not(.wrap) :checked),
label:has(:checked) + label:not(.wrap),
label:has(:checked) + label + label + label + label {
  background-color: var(--dont);
  /* pointer-events: all */
}

/* Arrows to show direction of possible movement */

/* label::before {
  position: absolute;
  left: 0;
  width: 100%;
  font-size: var(--tiny);
  text-align: center;
}

label:has(+ label + label + label + label :checked)::before {
  content: "v";
  bottom: -22px;;
}

label:has(+ label:not(.wrap) :checked)::before {
  content: ">";
  bottom: 4px;
  left: 8px;
  text-align: right;
}

label:has(:checked) + label:not(.wrap)::before {
  content: "<";
  bottom: 4px;
  left: -8px;
  text-align: left;
}

label:has(:checked) + label + label + label + label::before {
  content: "^";
  top: -18px;
} */


/* Finding the number to display from --seedX */
/* The number counter is scoped to each span */

label:nth-child(1) span::after{
  counter-set: number calc(
    ( var(--seed1)
    - mod(var(--seed1), 4096)
    ) / 4096
  );
  content: counter(number, var(--count));
}

label:nth-child(2) span::after{
  counter-set: number calc(
    ( mod(var(--seed1), 4096)
    - mod(mod(var(--seed1), 4096), 256)
  ) / 256);
  content: counter(number, var(--count));
}

label:nth-child(3) span::after{
  counter-set: number calc(
    ( mod(var(--seed1), 256)
    - mod(mod(var(--seed1), 256), 16)
    ) / 16);
  content: counter(number, var(--count));
}

label:nth-child(4) span::after{
  counter-set: number mod(var(--seed1), 16);
  content: counter(number, var(--count));
}

label:nth-child(5) span::after{
  counter-set: number calc(
    ( var(--seed2)
    - mod(var(--seed2), 4096)
    ) / 4096
  );
  content: counter(number, var(--count));
}

label:nth-child(6) span::after{
  counter-set: number calc(
    ( mod(var(--seed2), 4096)
    - mod(mod(var(--seed2), 4096), 256)
    ) / 256);
  content: counter(number, var(--count));
}

label:nth-child(7) span::after{
  counter-set: number calc(
    ( mod(var(--seed2), 256)
    - mod(mod(var(--seed2), 256), 16)
    ) / 16);
  content: counter(number, var(--count));
}

label:nth-child(8) span::after{
  counter-set: number mod(var(--seed2), 16);
  content: counter(number, var(--count));
}

label:nth-child(9) span::after{
  counter-set: number calc(
    ( var(--seed3)
    - mod(var(--seed3), 4096)
    ) / 4096
  );
  content: counter(number, var(--count));
}

label:nth-child(10) span::after{
  counter-set: number calc(
    ( mod(var(--seed3), 4096)
    - mod(mod(var(--seed3), 4096), 256)
    ) / 256);
  content: counter(number, var(--count));
}

label:nth-child(11) span::after{
  counter-set: number calc(
    ( mod(var(--seed3), 256)
    - mod(mod(var(--seed3), 256), 16)
    ) / 16);
  content: counter(number, var(--count));
}

label:nth-child(12) span::after{
  counter-set: number mod(var(--seed3), 16);
  content: counter(number, var(--count));
}

label:nth-child(13) span::after{
  counter-set: number calc(
    ( var(--seed4)
    - mod(var(--seed4), 4096)
    ) / 4096
  );
  content: counter(number, var(--count));
}

label:nth-child(14) span::after{
  counter-set: number calc(
    ( mod(var(--seed4), 4096)
    - mod(mod(var(--seed4), 4096), 256)
    ) / 256);
  content: counter(number, var(--count));
}

label:nth-child(15) span::after{
  counter-set: number calc(
    ( mod(var(--seed4), 256)
    - mod(mod(var(--seed4), 256), 16)
    ) / 16);
  content: counter(number, var(--count));
}

label:nth-child(16) span::after{
  counter-set: number mod(var(--seed4), 16);
  content: counter(number, var(--count));
}

/*****************************************/
/*                                       */
/*       HARD-CODED SEQUENCE WHICH       */
/*     GIVES THE ILLUSION OF WORKING     */
/*                                       */
/*****************************************/

#switch:not(:checked) ~ .tiles {
  :nth-child(11):has(:checked) + label + label + label + label,
  :nth-child(15):has(:checked) + label,
  :nth-child(12):has(+ label + label + label + label :checked),
  :nth-child(8):has(+ label + label + label + label :checked),
  :nth-child(7):has(+ label :checked),
  :nth-child(3):has(+ label + label + label + label :checked),
  :nth-child(2):has(+ label :checked),
  :nth-child(1):has(+ label :checked),
  :nth-child(1):has(:checked) + label + label + label + label,
  :nth-child(5):has(:checked) + label,
  :nth-child(6):has(:checked) + label + label + label + label,
  :nth-child(10):has(:checked) + label + label + label + label,
  :nth-child(13):has(+ label :checked),
  :nth-child(9):has(+ label + label + label + label :checked){
  background-color: var(--next);
  pointer-events: all;;
}
}
/* 
below
label:nth-child(11):has(:checked) + label + label + label + label
above 
label:nth-child(12):has(+ label + label + label + label :checked)
right
label:nth-child(15):has(:checked) + label
left
label:nth-child(7):has(+ label :checked)
*/
#switch:checked ~ .tiles :nth-child(9):has(:checked) + label + label + label + label,
#switch:checked ~ .tiles :nth-child(13):has(:checked) + label,
#switch:checked ~ .tiles :nth-child(10):has(+ label + label + label + label :checked),
#switch:checked ~ .tiles :nth-child(6):has(+ label + label + label + label :checked),
#switch:checked ~ .tiles :nth-child(5):has(+ label :checked),
#switch:checked ~ .tiles :nth-child(1):has(+ label + label + label + label :checked),
#switch:checked ~ .tiles :nth-child(1):has(:checked) + label,
#switch:checked ~ .tiles :nth-child(2):has(:checked) + label,
#switch:checked ~ .tiles :nth-child(3):has(:checked) + label + label + label + label,
#switch:checked ~ .tiles :nth-child(7):has(:checked) + label,
#switch:checked ~ .tiles :nth-child(8):has(:checked) + label + label + label + label,
#switch:checked ~ .tiles :nth-child(12):has(:checked) + label + label + label + label,
#switch:checked ~ .tiles :nth-child(15):has(+ label :checked),
#switch:checked ~ .tiles :nth-child(11):has(+ label + label + label + label :checked)
{
  background-color: var(--next);
  pointer-events: all;;
}

.tiles:has(label:nth-child(15) :checked) {
  --seed3: 
   9 * 4096
+ 10 * 256
+ 15 * 16
+ 12;
 --seed4: 
  13 * 4096
+ 14 * 256
+ 0 * 16
+ 0;
}

.tiles:has(label:nth-child(16) :checked) {
  --seed3: 
   9 * 4096
+ 10 * 256
+ 15 * 16
+ 12;
 --seed4: 
  13 * 4096
+ 14 * 256
+  0 * 16
+  0;
}

.tiles:has(label:nth-child(12) :checked) {
  --seed3: 
   9 * 4096
+ 10 * 256
+ 15 * 16
+  0;
 --seed4: 
  13 * 4096
+ 14 * 256
+  0 * 16
+ 12;
}

.tiles:has(label:nth-child(8) :checked) {
  --seed2: 
   5 * 4096
+  6 * 256
+  7 * 16
+  0;
  --seed3: 
   9 * 4096
+ 10 * 256
+ 15 * 16
+  8;
 --seed4: 
  13 * 4096
+ 14 * 256
+ 0 * 16
+ 12;
}

.tiles:has(label:nth-child(7) :checked) {
  --seed2: 
   5 * 4096
+  6 * 256
+  0 * 16
+  7;
  --seed3: 
   9 * 4096
+ 10 * 256
+ 15 * 16
+  8;
 --seed4: 
  13 * 4096
+ 14 * 256
+ 0 * 16
+ 12;
}

.tiles:has(label:nth-child(3) :checked) {
  --seed1: 
   1 * 4096
+  2 * 256
+  0 * 16
+  4;
  --seed2: 
   5 * 4096
+  6 * 256
+  3 * 16
+  7;
  --seed3: 
   9 * 4096
+ 10 * 256
+ 15 * 16
+  8;
 --seed4: 
  13 * 4096
+ 14 * 256
+ 0 * 16
+ 12;
}

.tiles:has(label:nth-child(2) :checked) {
  --seed1: 
   1 * 4096
+  0 * 256
+  2 * 16
+  4;
  --seed2: 
   5 * 4096
+  6 * 256
+  3 * 16
+  7;
  --seed3: 
   9 * 4096
+ 10 * 256
+ 15 * 16
+  8;
 --seed4: 
  13 * 4096
+ 14 * 256
+ 0 * 16
+ 12;
}

.tiles:has(label:nth-child(1) :checked) {
  --seed1: 
   0 * 4096
+  1 * 256
+  2 * 16
+  4;
  --seed2: 
   5 * 4096
+  6 * 256
+  3 * 16
+  7;
  --seed3: 
   9 * 4096
+ 10 * 256
+ 15 * 16
+  8;
 --seed4: 
  13 * 4096
+ 14 * 256
+ 0 * 16
+ 12;
}

.tiles:has(label:nth-child(5) :checked) {
  --seed1: 
   5 * 4096
+  1 * 256
+  2 * 16
+  4;
  --seed2: 
   0 * 4096
+  6 * 256
+  3 * 16
+  7;
  --seed3: 
   9 * 4096
+ 10 * 256
+ 15 * 16
+  8;
 --seed4: 
  13 * 4096
+ 14 * 256
+ 0 * 16
+ 12;
}

.tiles:has(label:nth-child(6) :checked) {
  --seed1: 
   5 * 4096
+  1 * 256
+  2 * 16
+  4;
  --seed2: 
   6 * 4096
+  0 * 256
+  3 * 16
+  7;
  --seed3: 
   9 * 4096
+ 10 * 256
+ 15 * 16
+  8;
 --seed4: 
  13 * 4096
+ 14 * 256
+ 0 * 16
+ 12;
}

.tiles:has(label:nth-child(10) :checked) {
  --seed1: 
   5 * 4096
+  1 * 256
+  2 * 16
+  4;
  --seed2: 
   6 * 4096
+ 10 * 256
+  3 * 16
+  7;
  --seed3: 
   9 * 4096
+  0 * 256
+ 15 * 16
+  8;
 --seed4: 
  13 * 4096
+ 14 * 256
+ 0 * 16
+ 12;
}

.tiles:has(label:nth-child(14) :checked) {
  --seed1: 
   5 * 4096
+  1 * 256
+  2 * 16
+  4;
  --seed2: 
   6 * 4096
+ 10 * 256
+  3 * 16
+  7;
  --seed3: 
   9 * 4096
+ 14 * 256
+ 15 * 16
+  8;
 --seed4: 
  13 * 4096
+ 0 * 256
+ 0 * 16
+ 12;
}

.tiles:has(label:nth-child(13) :checked) {
  --seed1: 
   5 * 4096
+  1 * 256
+  2 * 16
+  4;
  --seed2: 
   6 * 4096
+ 10 * 256
+  3 * 16
+  7;
  --seed3: 
   9 * 4096
+ 14 * 256
+ 15 * 16
+  8;
 --seed4: 
  0 * 4096
+ 13 * 256
+ 0 * 16
+ 12;
}

.tiles:has(label:nth-child(9) :checked) {
  --seed1: 
   5 * 4096
+  1 * 256
+  2 * 16
+  4;
  --seed2: 
   6 * 4096
+ 10 * 256
+  3 * 16
+  7;
  --seed3: 
   0 * 4096
+ 14 * 256
+ 15 * 16
+  8;
 --seed4: 
  9 * 4096
+ 13 * 256
+ 0 * 16
+ 12;
}

main label[for=switch] {
  position: absolute;
  z-index: 99;
  top: 0;
  left: 0;
  width: var(--main);
  height: var(--main);
  pointer-events: all;
  display: none;

  /* background-color: #9009; */

  b {
    position: absolute;
    font-size: 24px;
  }

  .sun {
    top: 148px;
    left: 10px;
  }

  .always {
    top: 175px;
    left: 12px;
    font-size: 16px;
  }

  .moon {
    top: 192px;
    left: 40px;
  }
}

.tiles:has(:nth-child(9) :checked) + [for=switch] {
  display: block;
}

/* label:nth-child(9) {
  pointer-events: all;
} */

html:has(#switch:checked) {
  --count: yours;

  [for=switch] {
    display: none;
  }
}

div.yours {
  display: none;

  & .heart {
    position: absolute;
    top: 155px;
    left: 160px;
    font-size: var(--size);
  }
}

#switch:checked ~ .tiles:has(label:nth-child(11) :checked) ~ .yours {
  display: block;
}